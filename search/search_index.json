{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"FirstPage/","text":"Haze Engine Documentation The Haze Engine is a game engine built on top of the Simple and Fast Multimedia Library (SFML). It provides an interface for creating 2D games and multimedia applications optimized for desktop computers. Getting Started To get started with the Haze Engine, follow these steps: Include the necessary header files: Create an instance of the Haze::Engine class: Haze::Engine engine; Initialize the engine: engine.init(); Create entities using the Haze::Entity class: Haze::Entity *entity1 = engine.createEntity(); Haze::Entity *entity2 = engine.createEntity(); Add components to the entities. Here are some examples: Add a Haze::Position component: entity1->addComponent(new Haze::Position(0, 0)); Add a Haze::Sprite component: entity1->addComponent(new Haze::Sprite(\"assets/ship.png\")); Add a Haze::Animation component: entity1->addComponent(new Haze::Animation(\"assets/r-typesheet30a.gif\", 34, 34, 3, 1)); Add a Haze::Window component: entity2->addComponent(new Haze::Window(800, 600)); Start the game loop by checking if the engine is open: while (engine.isOpen()) { engine.update(); } Components Haze::Position The Haze::Position component represents the position of an entity in the game world. It takes two arguments: the X and Y coordinates. Haze::Sprite The Haze::Sprite component allows you to display a sprite for an entity. It takes the path to the sprite image as an argument. Haze::Animation The Haze::Animation component enables you to create animations for entities. It takes the following arguments: The Haze::Window component is used to create a window for your game. It takes the width and height of the window as arguments. Example Usage Here's an example of how to use the Haze Engine to create a simple game loop: #include <Haze> int main() { Haze::Engine engine; engine.init(); Haze::Entity *entity1 = engine.createEntity(); Haze::Entity *entity2 = engine.createEntity(); entity1->addComponent(new Haze::Position(0, 0)); entity1->addComponent(new Haze::Sprite(\"assets/ship.png\")); entity1->addComponent(new Haze::Animation(\"assets/r-typesheet30a.gif\", 34, 34, 3, 1)); entity2->addComponent(new Haze::Window(800, 600)); while (engine.isOpen()) { engine.update(); } return 0; }","title":"Haze Engine Documentation"},{"location":"FirstPage/#haze-engine-documentation","text":"The Haze Engine is a game engine built on top of the Simple and Fast Multimedia Library (SFML). It provides an interface for creating 2D games and multimedia applications optimized for desktop computers.","title":"Haze Engine Documentation"},{"location":"FirstPage/#getting-started","text":"To get started with the Haze Engine, follow these steps: Include the necessary header files: Create an instance of the Haze::Engine class: Haze::Engine engine; Initialize the engine: engine.init(); Create entities using the Haze::Entity class: Haze::Entity *entity1 = engine.createEntity(); Haze::Entity *entity2 = engine.createEntity(); Add components to the entities. Here are some examples: Add a Haze::Position component: entity1->addComponent(new Haze::Position(0, 0)); Add a Haze::Sprite component: entity1->addComponent(new Haze::Sprite(\"assets/ship.png\")); Add a Haze::Animation component: entity1->addComponent(new Haze::Animation(\"assets/r-typesheet30a.gif\", 34, 34, 3, 1)); Add a Haze::Window component: entity2->addComponent(new Haze::Window(800, 600)); Start the game loop by checking if the engine is open: while (engine.isOpen()) { engine.update(); }","title":"Getting Started"},{"location":"FirstPage/#components","text":"Haze::Position The Haze::Position component represents the position of an entity in the game world. It takes two arguments: the X and Y coordinates. Haze::Sprite The Haze::Sprite component allows you to display a sprite for an entity. It takes the path to the sprite image as an argument. Haze::Animation The Haze::Animation component enables you to create animations for entities. It takes the following arguments: The Haze::Window component is used to create a window for your game. It takes the width and height of the window as arguments.","title":"Components"},{"location":"FirstPage/#example-usage","text":"Here's an example of how to use the Haze Engine to create a simple game loop: #include <Haze> int main() { Haze::Engine engine; engine.init(); Haze::Entity *entity1 = engine.createEntity(); Haze::Entity *entity2 = engine.createEntity(); entity1->addComponent(new Haze::Position(0, 0)); entity1->addComponent(new Haze::Sprite(\"assets/ship.png\")); entity1->addComponent(new Haze::Animation(\"assets/r-typesheet30a.gif\", 34, 34, 3, 1)); entity2->addComponent(new Haze::Window(800, 600)); while (engine.isOpen()) { engine.update(); } return 0; }","title":"Example Usage"}]}